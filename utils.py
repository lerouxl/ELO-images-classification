import numpy as np
from PIL import Image
from pathlib import Path
import csv
from string import Template
import operator


def normalise(arr: Image) -> Image:
    """
    From https://stackoverflow.com/questions/7422204/intensity-normalization-of-image-using-pythonpil-speed-issues
    Linear normalization
    http://en.wikipedia.org/wiki/Normalization_%28image_processing%29
    """
    arr = np.array(arr)
    arr = arr.astype("float")
    # Do not touch the alpha channel
    for i in range(3):
        minval = arr[..., i].min()
        maxval = arr[..., i].max()
        if minval != maxval:
            arr[..., i] -= minval
            arr[..., i] *= 255.0 / (maxval - minval)

    arr = Image.fromarray(arr.astype("uint8"), "RGB")
    return arr


def generate_html_report(input_csv: Path, output_path: Path) -> None:
    """
    Generate an html report with the classified images and there classification probabilities.
    :param input_csv: The csv files generated by the classification
    :param output_path: Path to save the html report
    :return:
    """
    input_csv = Path(input_csv)
    output_path = Path(output_path)

    # Check extension
    assert output_path.suffix == ".html", "HTML name need to end with .html"

    # Load the line template:
    with open("template/html_report_line", "r") as f:
        template_line = Template(f.read())

    # Load the html template:
    with open("template/html_report_table", "r") as f:
        template_table = Template(f.read())

    # For each report generate a line in the table
    with open(input_csv) as csv_file:
        csv_reader = csv.DictReader(csv_file, delimiter=",")
        lines = ""
        for i, row in enumerate(csv_reader):
            row["id"] = i
            row["clg"] = row["clp"] = row["clb"] = ""
            # Color in green the biggest value
            score = dict((k, row[k]) for k in ("good", "porous", "bulging"))
            best_name = max(score.items(), key=operator.itemgetter(1))[0]
            if best_name == "good":
                row["clg"] = "class=green"
            elif best_name == "porous":
                row["clp"] = "class=green"
            elif best_name == "bulging":
                row["clb"] = "class=green"

            line = template_line.substitute(row)
            lines = lines + line

    # Merge the line in the table
    table = template_table.substitute(lines=lines)

    # Save the report in html
    with open(output_path, "w") as out:
        out.write(table)
